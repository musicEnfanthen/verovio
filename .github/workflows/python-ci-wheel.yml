name: Python Wheel Build

on:
  workflow_dispatch: # manual trigger
  push:
    # Trigger the workflow on push,
    # but only for the branches specified
    branches:
      # Push events on develop branch
      - ci-test


# globals
env:
  CIBW_BUILD_IDENTIFIER: ''


jobs:
  #===============================================#
  #         BUILD WHEEL DISTRIBUTION              #
  #===============================================#
  build_wheels:
    name: Build wheels (${{ matrix.python-version }}, ${{ matrix.platform_id }})
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      # Build the wheels for Linux, Windows and macOS for Python 3.6 and newer
      matrix:
        os: [ windows-latest, ubuntu-18.04, macos-latest ]
        python-version: [ 3.9 ] # [3.6, 3.7, 3.8, 3.9]
        architecture: [ x86, x64 ]
        # platform_id: [win_amd64, win32, manylinux_x86_64, manylinux_i686, macosx_x86_64]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: windows-latest
            architecture: x64
            platform_id: win_amd64
          - os: windows-latest
            architecture: x86
            platform_id: win32
          - os: ubuntu-latest
            architecture: x64
            platform_id: manylinux_x86_64
          - os: macos-latest
            architecture: x64
            platform_id: macosx_x86_64
        exclude:
          - os: ubuntu-latest
            architecture: x86
            # platform_id: manylinux_i686
          - os: macos-latest
            architecture: x86

    steps:
      #===============================================#
      # Set up
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Verify Python version
        run: python -c "import sys; print(sys.version)"

      #===============================================#
      # Dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel==1.7.1 twine

      #===============================================#
      # Prepare identifier
      - name: Set CIBW_BUILD_IDENTIFIER
        shell: bash
        run: |
          # Remove dot from python-version for CIBW and prefix with cp
          id=cp$(echo ${{ matrix.python-version }} | sed -e 's/\.//g')-${{ matrix.platform_id }}
          echo CIBW_BUILD_IDENTIFIER=$id >> $GITHUB_ENV

      - name: Check CIBW_BUILD_IDENTIFIER
        shell: bash
        run: echo ${{ env.CIBW_BUILD_IDENTIFIER }}

      - name: Get Build Identifiers
        run: python -m cibuildwheel --print-build-identifiers

      #===============================================#
      # wheels
      - name: Build wheels
        env:
          CIBW_SKIP: cp27-* # manylinux2014 not compatible with python 2.7
          CIBW_BUILD: ${{ env.CIBW_BUILD_IDENTIFIER }}
          CIBW_BEFORE_ALL_LINUX: yum install swig -y 
          CIBW_BEFORE_ALL_MACOS: brew install swig
          CIBW_BEFORE_ALL_WINDOWS: choco install swig -f -y
          CIBW_BEFORE_BUILD: swig -version && bash -c 'cd tools; ./get_git_commit.sh' && swig -c++ -python ./bindings/python/verovio.i
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_I686_IMAGE: manylinux2014
        run: python -m cibuildwheel --output-dir wheelhouse

      #===============================================#
      # Check build
      - name: "List result"
        working-directory: wheelhouse
        run: ls -R

      - name: Check with Twine
        working-directory: wheelhouse
        run: twine check *.whl

      - name: Check wheel installation on Non-Windows
        if: always() && runner.os != 'Windows'
        working-directory: wheelhouse
        run: python -m pip install ./*.whl

      # Wildcard use is different with PowerShell
      # cf. https://stackoverflow.com/a/43900040
      - name: Check wheel installation on Windows
        working-directory: wheelhouse
        if: always() && runner.os == 'Windows'
        run: python -m pip install (get-item .\*.whl).FullName

      - name: Check wheel installation
        working-directory: wheelhouse
        run: python -c "import verovio; tk = verovio.toolkit(); v = tk.getVersion(); print('verovio.toolkit.getVersion():', v)"

      #===============================================#
      # Upload artifacts
      - uses: actions/upload-artifact@v2
        with:
          name: cibuildwheel-${{ runner.os }}-python-${{ matrix.python-version }}
          path: ./wheelhouse/*.whl
