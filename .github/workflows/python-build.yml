name: Python Build

on:
  workflow_dispatch: # manual trigger
  push:
    # Trigger the workflow on push,
    # but only for the branches specified
    branches:
      # Push events on develop branch
      - ci-test

jobs:
  build_wheels:
    name: Build wheels (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.win }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]
        python-version: [3.7] # [2.7, 3.5, 3.6, 3.7, 3.8]
        win: [false]
        exclude:
          - os: macos-latest
            python-version: 2.7
        include:
          - python-version: 3.7
            os: windows-latest
            win: true
        
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Verify Python version
        run: python -c "import sys; print(sys.version)"
  
      #===============================================#
      # SWIG
      #===============================================#
      - name: Install swig on Windows
        if: runner.os == 'Windows'
        run: choco install swig -f -y
          
      - name: Install swig on macOs
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install swig
    
      - name: Install swig on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install swig
      
      - name: Verify swig
        run: swig -version
      #===============================================#
  
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine check-wheel-contents wheel-inspect
        
      #===============================================#
      # SET UP DATA RESOURCES
      #===============================================#   
      - name: Move setup.py to top level
        run: mv bindings/python/setup.py .
      
      - name: Verify
        run: ls -R
       
      #- name: Symlink data folder
      #  working-directory: bindings/python
      #  run: ln -s -v ../../data data
      
      - name: Create __init__.py in data folder
        working-directory: data
        run: touch __init__.py
      
      - name: Create MANIFEST.in with recursively included data
        run: |
          touch MANIFEST.in
          echo "recursive-include data *" > MANIFEST.in
          
      #===============================================#
      # WHEELS
      #===============================================#
      - name: Build wheels
        run: python setup.py sdist bdist_wheel
 
      - name: "List result"
        run: ls -R
      - name: "Check with Twine"
        working-directory: dist
        run: twine check *.whl
      - name: "Check with check-wheel-contents"
        if: always() && runner.os != 'Windows'
        working-directory: dist
        run: check-wheel-contents *.whl
      - name: "Check with wheel-inspect"
        if: always() && runner.os != 'Windows'
        working-directory: dist
        run: wheel2json *.whl
      
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ runner.os }}-python-${{ matrix.python-version }}
          path: dist/*.whl
      
   
  
  build_sdist:
    name: Build sdist (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Verify Python version
        run: python -c "import sys; print(sys.version)"
  
      #===============================================#
      # SWIG
      #===============================================#
      - name: Install swig
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install swig
      
      - name: Verify swig
        run: swig -version
      #===============================================#
    
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      #===============================================#
      # SET UP DATA RESOURCES
      #===============================================#   
      - name: Move setup.py to top level
        run: mv bindings/python/setup.py .
      
      - name: Verify
        run: ls -R
      
      #- name: Symlink data folder
      #  working-directory: bindings/python
      #  run: ln -s -v ../../data data
      
      - name: Create MANIFEST.in with recursively included data
        run: |
          touch MANIFEST.in
          echo "recursive-include data *" > MANIFEST.in
 
      #===============================================#
      # SDIST
      #===============================================#
      - name: Build source distribution
        run: python setup.py sdist
 
      - name: "List result"
        run: ls -l dist
      - name: "Check with Twine"
        run: twine check dist/*
 
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-sdist-python-${{ matrix.python-version }}
          path: dist/*.tar.gz
          
  upload_testpypi:
    name: Upload to TestPyPi
    needs: [build_wheels, build_sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.7]
        
    steps:
      - uses: actions/checkout@v2
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine
          
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: bindings/python/artifacts/
      
      - name: Display structure of downloaded files
        working-directory: bindings/python/artifacts/
        run: ls -R
     
      - name: Copy artifacts to dist folder
        working-directory: bindings/python/
        run: | 
          mkdir -p ./dist
          cp artifacts/*-3.7/* dist/
      
      - name: Verify dist folder
        working-directory: bindings/python/dist/
        run: ls -R
      
      # probably needs account
      - name: Upload to TestPyPi
        working-directory: bindings/python
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
        run: twine upload --repository testpypi dist/*
      
      - name: Download from TestPyPi
        working-directory: bindings/python
        run: |
          python -m pip install --index-url https://test.pypi.org/simple/ verovio
