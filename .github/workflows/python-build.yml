name: Python Build

on:
  workflow_dispatch: # manual trigger
  push:
    # Trigger the workflow on push,
    # but only for the branches specified
    branches:
      # Push events on develop branch
      - ci-test

env:
  CHECK_INSTALL_DIR: check_install_dir
  PACKAGE_NAME: verovio

jobs:
  #===============================================#
  #         BUILD WHEEL DISTRIBUTION              #
  #===============================================#
  build_wheels:
    name: Build wheels (${{ matrix.python-version }}, ${{ matrix.os }}-${{ matrix.architecture }})
    runs-on: ${{ matrix.os }}
    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      # Build the wheels for Linux, Windows and macOS for specified python-version
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        python-version: [ 3.9 ] # [3.6, 3.7, 3.8, 3.9]
        architecture: [ x86, x64 ]
        include:
          # Run 32 and 64 bit version in parallel for Linux and Windows
          - os: windows-latest
            architecture: x64
          - os: windows-latest
            architecture: x86
          - os: ubuntu-latest
            architecture: x64
          - os: macos-latest
            architecture: x64
        exclude:
          - os: ubuntu-latest
            architecture: x86
          - os: macos-latest
            architecture: x86

        
    steps:
      #===============================================#
      # Set up
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      
      - name: Verify Python version
        run: python -c "import sys; print(sys.version)"
  
      #===============================================#
      # Swig
      - name: Install swig on Windows
        if: runner.os == 'Windows'
        run: choco install swig -f -y
          
      - name: Install swig on macOs
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install swig
    
      - name: Install swig on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install swig
      
      - name: Verify swig
        run: swig -version

      #===============================================#
      # Dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine check-wheel-contents wheel-inspect
         
      #===============================================#
      # wheels
      - name: Build ext
        shell: bash
        run: python setup.py build_ext

      - name: Build bdist wheel
        run: python setup.py bdist_wheel

      #===============================================#
      # Check build
      - name: List result
        working-directory: dist
        run: ls -R
      - name: Check with Twine
        working-directory: dist
        run: twine check *.whl
    #  - name: "Check with check-wheel-contents"
    #    if: always() && runner.os != 'Windows'
    #    working-directory: dist
    #    run: check-wheel-contents *.whl --ignore W002
      - name: Check with wheel-inspect
        if: always() && runner.os != 'Windows'
        working-directory: dist
        run: wheel2json *.whl

      - name: Create install dir
        shell: bash
        run: mkdir - p ${{ env.CHECK_INSTALL_DIR }}

      - name: Install wheel
        if: always() && runner.os != 'Windows'
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -m pip install ../dist/*.whl

      # Wildcard use is different with PowerShell
      # cf. https://stackoverflow.com/a/43900040
      - name: Install wheel on Windows
        if: always() && runner.os == 'Windows'
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -m pip install (get-item ..\dist\*.whl).FullName

      - name: Check wheel installation
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -c "import verovio; tk = verovio.toolkit(); v = tk.getVersion(); print('verovio.toolkit.getVersion():', v)"

      #===============================================#
      # Upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-python-${{ matrix.python-version }}
          path: dist/*.whl


  #===============================================#
  #         BUILD SOURCE DISTRIBUTION             #
  #===============================================#
  build_sdist:
    name: Build sdist (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.9]

    steps:
      #===============================================#
      # Set up
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Verify Python version
        run: python -c "import sys; print(sys.version)"
  
      #===============================================#
      # Swig
      - name: Install swig
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -q
          sudo apt-get install swig
      
      - name: Verify swig
        run: swig -version

      #===============================================#
      # Dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel twine
 
      #===============================================#
      # sdist
      - name: Build ext
        shell: bash
        run: python setup.py build_ext

      - name: Build source distribution
        run: python setup.py sdist

      #===============================================#
      # Check build
      - name: List result
        working-directory: dist
        run: ls -R
      - name: Check with Twine
        working-directory: dist
        run: twine check *.tar.gz

      - name: Create install dir
        shell: bash
        run: mkdir - p ${{ env.CHECK_INSTALL_DIR }}

      - name: Install from source
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -m pip install ../dist/*.tar.gz

      - name: Check source installation
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -c "import verovio; tk = verovio.toolkit(); v = tk.getVersion(); print('verovio.toolkit.getVersion():', v)"

      #===============================================#
      # Upload artifact
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-sdist-python-${{ matrix.python-version }}
          path: dist/*.tar.gz


  #===============================================#
  #         UPLOAD TO PACKAGE INDEX               #
  #===============================================#
  upload_testpypi:
    name: Upload to TestPyPi
    needs: [build_wheels, build_sdist]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04]
        python-version: [3.9]
        architecture: [ x64 ]

    steps:
      #===============================================#
      # Set up
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      #===============================================#
      # Dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      #===============================================#
      # Prepare artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: bindings/python/artifacts/

      - name: Display structure of downloaded files
        working-directory: bindings/python/artifacts/
        run: ls -R

      - name: Copy artifacts to dist folder
        working-directory: bindings/python/
        run: |
          mkdir -p ./dist
          cp artifacts/*-${{ matrix.python-version }}/* dist/

      - name: Verify dist folder
        working-directory: bindings/python/dist/
        run: ls -R

      #===============================================#
      # Upload to package index
      - name: Upload to TestPyPi
        working-directory: bindings/python
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
        run: twine upload --repository testpypi dist/*

      #===============================================#
      # Check build
      - name: Create install dir
        shell: bash
        run: mkdir - p ${{ env.CHECK_INSTALL_DIR }}

      - name: Install from package index
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -m pip install --index-url https://test.pypi.org/simple/ ${{ env.PACKAGE_NAME }}

      - name: Check source installation
        working-directory: ${{ env.CHECK_INSTALL_DIR }}
        run: python -c "import verovio; tk = verovio.toolkit(); v = tk.getVersion(); print('verovio.toolkit.getVersion():', v)"